# This compose file has several profiles you can use for different purposes.
# Example: docker-compose --profile kafkatools --profile app up -d
# See https://docs.docker.com/compose/profiles/ for details.
#
# Profiles:
# - no profile: Core dependencies the app always needs to run.
# - kafkatools: Extra kafka tools for inspecting kafka stuff.
# - app: The app itself packaged via the Dockerfile.

version: "3.9"
services:

  db:
    # Match azure version, and keep in sync with codefresh.yml and BaseAppIntegrationTest.
    image: postgres:13.6-alpine
    healthcheck:
      test: pg_isready
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: calendars
    ports:
      - "5433:5432"

  redis:
    # Match Azure Cache version, and keep in sync with BaseAppIntegrationTest.
    image: redis:6.0-alpine
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "6380:6379"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.1.2
    healthcheck:
      test: nc -z localhost 2181 || exit 1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.1.2
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: kafka-cluster cluster-id --bootstrap-server localhost:9092
      start_period: 30s
      interval: 15s
      timeout: 30s
      retries: 20
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"

  schema-registry:
    image: confluentinc/cp-schema-registry:7.1.2
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: curl --output /dev/null --silent --head --fail http://schema-registry:8081/subjects
      start_period: 10s
      interval: 10s
      timeout: 20s
      retries: 10
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9093

  # Provides RESTful interface to a Kafka cluster, making it easy to produce and consume messages
  # (https://docs.confluent.io/current/kafka-rest/index.html)
  restproxy:
    profiles: ['kafkatools']
    image: confluentinc/cp-kafka-rest:7.1.2
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_HOST_NAME: restproxy
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:9093
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082

  # Provides a web UI for viewing clusters, topics, messages, etc.
  # https://docs.confluent.io/current/control-center/index.html
  control-center:
    profiles: ['kafkatools']
    image: confluentinc/cp-enterprise-control-center:7.1.2
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:9093
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  # Provides another web UI for topics, messages, and some things control-center doesn't do.
  # I'm not yet sure if this or control-center is more useful, so we can try both for a while.
  # https://github.com/obsidiandynamics/kafdrop
  kafdrop:
    profiles: ['kafkatools']
    image: obsidiandynamics/kafdrop:latest
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9093

  app:
    profiles: ['app']
    build: .
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: local,me
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/calendars
      SPRING_REDIS_URL: redis://redis:6379/0
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      SPRING_KAFKA_CONSUMER_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      SPRING_KAFKA_PRODUCER_PROPERTIES_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      LOG_APPENDER: console
    ports:
      - "2006:2006"
    volumes:
      - ./local-migrations:/app/local-migrations:readonly
